// <auto-generated />
using System;
using Impresoras.App.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Impresoras.App.Persistencia.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20220822235506_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Impresoras.App.Dominio.Impresora", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Anio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaisOrigen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlacaImpresoraID")
                        .HasColumnType("int");

                    b.Property<int?>("TipoImpresoraID")
                        .HasColumnType("int");

                    b.Property<double>("VelocidadImpresion")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("PlacaImpresoraID");

                    b.HasIndex("TipoImpresoraID");

                    b.ToTable("Impresoras");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Seguro", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FechaCompra")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FechaVencimiento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlacaImpresoraID")
                        .HasColumnType("int");

                    b.Property<int?>("TipoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PlacaImpresoraID");

                    b.HasIndex("TipoID");

                    b.ToTable("Seguros");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.TipoImpresora", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TipoImpresoras");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.TipoSeguro", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TipoDeSeguro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TipoSeguros");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Usuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Socio", b =>
                {
                    b.HasBaseType("Impresoras.App.Dominio.Usuario");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeguroID")
                        .HasColumnType("int");

                    b.HasIndex("SeguroID");

                    b.HasDiscriminator().HasValue("Socio");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Impresora", b =>
                {
                    b.HasOne("Impresoras.App.Dominio.Impresora", "PlacaImpresora")
                        .WithMany()
                        .HasForeignKey("PlacaImpresoraID");

                    b.HasOne("Impresoras.App.Dominio.TipoImpresora", "TipoImpresora")
                        .WithMany()
                        .HasForeignKey("TipoImpresoraID");

                    b.Navigation("PlacaImpresora");

                    b.Navigation("TipoImpresora");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Seguro", b =>
                {
                    b.HasOne("Impresoras.App.Dominio.Impresora", "PlacaImpresora")
                        .WithMany()
                        .HasForeignKey("PlacaImpresoraID");

                    b.HasOne("Impresoras.App.Dominio.TipoSeguro", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoID");

                    b.Navigation("PlacaImpresora");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Socio", b =>
                {
                    b.HasOne("Impresoras.App.Dominio.Seguro", "Seguro")
                        .WithMany()
                        .HasForeignKey("SeguroID");

                    b.Navigation("Seguro");
                });
#pragma warning restore 612, 618
        }
    }
}

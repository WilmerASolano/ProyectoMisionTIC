// <auto-generated />
using System;
using Impresoras.App.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Impresoras.App.Persistencia.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20220829172309_GenerandoTablasYRelacionesUnoAMuchos")]
    partial class GenerandoTablasYRelacionesUnoAMuchos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Impresoras.App.Dominio.Asignacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AuxiliarId")
                        .HasColumnType("int");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuxiliarId");

                    b.HasIndex("PersonaId");

                    b.ToTable("Asignaciones");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.HistorialRevision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<int>("JefeId")
                        .HasColumnType("int");

                    b.Property<int>("JefeOperacionesId")
                        .HasColumnType("int");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JefeOperacionesId");

                    b.ToTable("HistorialRevisiones");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Impresora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Anio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AuxiliarId")
                        .HasColumnType("int");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int");

                    b.Property<int?>("JefeOperacionesId")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaisOrigen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("PlacaImpresora")
                        .HasColumnType("int");

                    b.Property<double>("VelocidadImpresion")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AuxiliarId");

                    b.HasIndex("JefeOperacionesId");

                    b.HasIndex("PersonaId");

                    b.ToTable("Impresoras");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTelefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Persona");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Revision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Alineacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoCabezal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoExtrusor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("Voltaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Revisiones");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Seguro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JefeOperacionesId")
                        .HasColumnType("int");

                    b.Property<int?>("OperarioId")
                        .HasColumnType("int");

                    b.Property<int?>("PlacaImpresoraId")
                        .HasColumnType("int");

                    b.Property<int>("SocioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JefeOperacionesId");

                    b.HasIndex("OperarioId");

                    b.HasIndex("PlacaImpresoraId");

                    b.HasIndex("SocioId");

                    b.ToTable("Seguros");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.TipoImpresora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ImpresoraId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImpresoraId");

                    b.ToTable("TipoImpresoras");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.TipoRevision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("HistorialId")
                        .HasColumnType("int");

                    b.Property<int>("HistorialRevisionId")
                        .HasColumnType("int");

                    b.Property<string>("TipoDeRevision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HistorialRevisionId");

                    b.ToTable("TipoRevisiones");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.TipoSeguro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("SeguroId")
                        .HasColumnType("int");

                    b.Property<string>("TipoDeSeguro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeguroId");

                    b.ToTable("TipoSeguros");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Auxiliar", b =>
                {
                    b.HasBaseType("Impresoras.App.Dominio.Persona");

                    b.HasDiscriminator().HasValue("Auxiliar");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.JefeOperaciones", b =>
                {
                    b.HasBaseType("Impresoras.App.Dominio.Persona");

                    b.Property<int>("JefeId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("JefeOperaciones");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Operario", b =>
                {
                    b.HasBaseType("Impresoras.App.Dominio.Persona");

                    b.Property<int?>("AuxiliarId")
                        .HasColumnType("int");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasIndex("AuxiliarId");

                    b.HasIndex("PersonaId");

                    b.HasDiscriminator().HasValue("Operario");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Socio", b =>
                {
                    b.HasBaseType("Impresoras.App.Dominio.Persona");

                    b.Property<int?>("AuxiliarId")
                        .HasColumnType("int")
                        .HasColumnName("Socio_AuxiliarId");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("Socio_PersonaId");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AuxiliarId");

                    b.HasIndex("PersonaId");

                    b.HasDiscriminator().HasValue("Socio");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Tecnico", b =>
                {
                    b.HasBaseType("Impresoras.App.Dominio.Persona");

                    b.Property<int?>("AuxiliarId")
                        .HasColumnType("int")
                        .HasColumnName("Tecnico_AuxiliarId");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int")
                        .HasColumnName("Tecnico_IdPersona");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("Tecnico_PersonaId");

                    b.Property<int?>("TecnicoId")
                        .HasColumnType("int");

                    b.HasIndex("AuxiliarId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("TecnicoId");

                    b.HasDiscriminator().HasValue("Tecnico");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Asignacion", b =>
                {
                    b.HasOne("Impresoras.App.Dominio.Auxiliar", null)
                        .WithMany("ListaAsignaciones")
                        .HasForeignKey("AuxiliarId");

                    b.HasOne("Impresoras.App.Dominio.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.HistorialRevision", b =>
                {
                    b.HasOne("Impresoras.App.Dominio.JefeOperaciones", "JefeOperaciones")
                        .WithMany("HistorialRevisiones")
                        .HasForeignKey("JefeOperacionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JefeOperaciones");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Impresora", b =>
                {
                    b.HasOne("Impresoras.App.Dominio.Auxiliar", null)
                        .WithMany("ListaImpresoras")
                        .HasForeignKey("AuxiliarId");

                    b.HasOne("Impresoras.App.Dominio.JefeOperaciones", null)
                        .WithMany("ListaImpresoras")
                        .HasForeignKey("JefeOperacionesId");

                    b.HasOne("Impresoras.App.Dominio.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Seguro", b =>
                {
                    b.HasOne("Impresoras.App.Dominio.JefeOperaciones", null)
                        .WithMany("ListaSeguros")
                        .HasForeignKey("JefeOperacionesId");

                    b.HasOne("Impresoras.App.Dominio.Operario", null)
                        .WithMany("ListaSeguros")
                        .HasForeignKey("OperarioId");

                    b.HasOne("Impresoras.App.Dominio.Impresora", "PlacaImpresora")
                        .WithMany()
                        .HasForeignKey("PlacaImpresoraId");

                    b.HasOne("Impresoras.App.Dominio.Socio", "Socio")
                        .WithMany("ListaSeguros")
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlacaImpresora");

                    b.Navigation("Socio");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.TipoImpresora", b =>
                {
                    b.HasOne("Impresoras.App.Dominio.Impresora", "Impresora")
                        .WithMany("TipoImpresoras")
                        .HasForeignKey("ImpresoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Impresora");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.TipoRevision", b =>
                {
                    b.HasOne("Impresoras.App.Dominio.HistorialRevision", "HistorialRevision")
                        .WithMany("TipoRevision")
                        .HasForeignKey("HistorialRevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistorialRevision");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.TipoSeguro", b =>
                {
                    b.HasOne("Impresoras.App.Dominio.Seguro", "Seguro")
                        .WithMany("TipoSeguro")
                        .HasForeignKey("SeguroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seguro");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Operario", b =>
                {
                    b.HasOne("Impresoras.App.Dominio.Auxiliar", null)
                        .WithMany("ListaOperarios")
                        .HasForeignKey("AuxiliarId");

                    b.HasOne("Impresoras.App.Dominio.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Socio", b =>
                {
                    b.HasOne("Impresoras.App.Dominio.Auxiliar", null)
                        .WithMany("ListaSocios")
                        .HasForeignKey("AuxiliarId");

                    b.HasOne("Impresoras.App.Dominio.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Tecnico", b =>
                {
                    b.HasOne("Impresoras.App.Dominio.Auxiliar", null)
                        .WithMany("ListaTecnicos")
                        .HasForeignKey("AuxiliarId");

                    b.HasOne("Impresoras.App.Dominio.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");

                    b.HasOne("Impresoras.App.Dominio.Tecnico", null)
                        .WithMany("ListaTecnicos")
                        .HasForeignKey("TecnicoId");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.HistorialRevision", b =>
                {
                    b.Navigation("TipoRevision");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Impresora", b =>
                {
                    b.Navigation("TipoImpresoras");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Seguro", b =>
                {
                    b.Navigation("TipoSeguro");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Auxiliar", b =>
                {
                    b.Navigation("ListaAsignaciones");

                    b.Navigation("ListaImpresoras");

                    b.Navigation("ListaOperarios");

                    b.Navigation("ListaSocios");

                    b.Navigation("ListaTecnicos");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.JefeOperaciones", b =>
                {
                    b.Navigation("HistorialRevisiones");

                    b.Navigation("ListaImpresoras");

                    b.Navigation("ListaSeguros");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Operario", b =>
                {
                    b.Navigation("ListaSeguros");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Socio", b =>
                {
                    b.Navigation("ListaSeguros");
                });

            modelBuilder.Entity("Impresoras.App.Dominio.Tecnico", b =>
                {
                    b.Navigation("ListaTecnicos");
                });
#pragma warning restore 612, 618
        }
    }
}
